/*
 * Copyright (c) 2016-2021 Marco Hladik <marco@icculus.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

class csbot:bot
{
	void(void) csbot;

	/* some objectives */
	virtual void(void) RunToConfront;
	virtual void(void) RunToBomb;
	virtual void(void) RunToBombsite;
	virtual void(void) RunToHostages;

	virtual void(void) CreateObjective;
	virtual void(void) PostFrame;
	virtual void(void) WeaponThink;

	virtual entity(int) GetBombsite;

	int m_iIsFetchingBomb;
};

void
csbot::RunToConfront(void)
{
	entity t;
	if (team == TEAM_T) {
		t = Route_SelectRandom("info_player_start");
	} else {
		t = Route_SelectRandom("info_player_deathmatch");
	}

	ChatSayTeam("Going to run to the enemy spawn!");

	if (t)
		route_calculate(this, t.origin, 0, Bot_RouteCB);
}
/* go to the planted bomb */
void
csbot::RunToBomb(void)
{
	entity e = world;
	e = find(e, ::model, "models/w_c4bomb.mdl");
	route_calculate(this, e.origin, 0, Bot_RouteCB);
	ChatSayTeam("Going to run to the bomb!");
}

/* go to a random bombsite */
void
csbot::RunToBombsite(void)
{
	entity e = world;
	vector vecTarget;

	/* Get random bombsite */
	int randomBombsiteIndex = random(0, g_cs_bombzones);
	e = GetBombsite(randomBombsiteIndex);

	vecTarget[0] = e.absmin[0] + (0.5 * (e.absmax[0] - e.absmin[0]));
	vecTarget[1] = e.absmin[1] + (0.5 * (e.absmax[1] - e.absmin[1]));
	vecTarget[2] = e.absmin[2] + (0.5 * (e.absmax[2] - e.absmin[2]));

	route_calculate(this, vecTarget, 0, Bot_RouteCB);
	ChatSayTeam(strcat("Going to run to a bomb site ", itos(randomBombsiteIndex), "!"));
}

void
csbot::RunToHostages(void)
{
	entity e = world;

	e = find(e, ::classname, "hostage_entity");

	route_calculate(this, e.origin, 0, Bot_RouteCB);
	ChatSayTeam("Going to run to the hostages!");
}

void
csbot::CreateObjective(void)
{
	if (g_cs_bombzones > 0) {
		/* Bomb map */
		if (g_cs_bombplanted) {
			/* Bomb planted */
			RunToBombsite();
			return;
		} else {
			/* Bomb not planted yet */
			if (g_items & ITEM_C4BOMB) {
				/* We carry the bomb */
				if (gflags & GF_BOMBZONE) {
					/* We are at a bombsite and ready to plant the bomb */
					if (activeweapon != WEAPON_C4BOMB) {
						/* Switch weapon to bomb */
						ChatSayTeam("Going to plant the bomb!");
						activeweapon = WEAPON_C4BOMB;
						Weapons_Draw();
					}
					/* Duck and plant bomb. */
					input_buttons |= (INPUT_BUTTON0 | INPUT_BUTTON8);
					input_movevalues = [0,0,0];
				} else {
					/* Go to a bombsite first */
					RunToBombsite();
				}
				return;
			}
			else if (team == TEAM_T && m_iIsFetchingBomb == FALSE) {
				/* Check if the bomb has been dropped */
				entity e = find(world, ::model, "models/w_backpack.mdl");
				if (e != world) {
					/* Go fetch dropped bomb! */
					m_iIsFetchingBomb = TRUE;
					ChatSayTeam("Arrr! Bomb on the ground, going to fetch it!");
					route_calculate(this, e.origin, 0, Bot_RouteCB);
					return;
				}
			}
		}
	}

	if (random() < 0.5) {
		if (g_cs_hostagestotal > 0)
			RunToHostages();
		if (g_cs_bombzones > 0)
			RunToBombsite();
	} else {
		RunToConfront();
	}
}

void
csbot::PostFrame(void)
{
	team = infokeyf(this, "*team");
};

void
csbot::WeaponThink(void)
{
	if (activeweapon == WEAPON_KNIFE)
		return;

	/* clip empty */
	if (a_ammo1 == 0) {
		/* still got ammo left, reload! */
		if (a_ammo2 != 0) {
			input_buttons &= ~INPUT_BUTTON0;
			input_buttons |= INPUT_BUTTON4;
		} else {
			Weapons_SwitchBest(this);
		}
	}
};

/** @brief Get bombsite entry by bombsite index
 *
 *  @note
 *  When there are for example 2 bombsites (g_cs_bombzones == 2) then valid
 *  indexes should be 0 and 1.
 * */
entity csbot::GetBombsite(int bombsiteIndex)
{
	int curIndex = 0;
	for (entity a = world; (a = find(a, ::classname, "func_bomb_target"));) {
		if (curIndex == bombsiteIndex)
			return a;
		++curIndex;
	}
	print("WARNING: cstrike/server/bot.qc GetBombsite: bombsite with index (", itos(bombsiteIndex), ") not found!\n");
	return world;
}

void
csbot::csbot(void)
{
	bot::bot();
	targetname = "_csbot_";
	team = infokeyf(this, "*team");

	m_iIsFetchingBomb = FALSE;
}

/* Bomb has been picked up. */
void CSBot_BombPickedUp(void) {
	entity e = find(world, ::model, "models/w_backpack.mdl");
	if (e != world) {
		/* for all T bots that are after the bomb we need to cancel their action
		 * else they will posibly be stuck. */
		for (entity a = world; (a = find(a, classname, "player"));) {
			if (clienttype(a) != CLIENTTYPE_REAL) {
				csbot targ;
				targ = (csbot)a;

				if (targ.m_iIsFetchingBomb == TRUE) {
					targ.RouteClear();
					targ.m_iIsFetchingBomb = FALSE;
				}
			}
		}

		/* remove the backpack bomb from the world, else on the next ticks it
		 * will still be found by find(world, ::model, "models/w_backpack.mdl");
		 * and the then the bots will go chase a ghost.. */
		remove(e);
	}
}

void
CSBot_BombPlantedNotify(void)
{
	for (entity a = world; (a = find(a, classname, "player"));) {
		if (clienttype(a) != CLIENTTYPE_REAL) {
			csbot targ;
			targ = (csbot)a;

			if (targ.team == TEAM_T)
				continue;
			if (targ.health <= 0)
				continue;
				
			targ.RunToBombsite();
		}
	}
}

void
CSBot_HostageRescueNotify(void)
{
	for (entity a = world; (a = find(a, classname, "player"));) {
		if (clienttype(a) != CLIENTTYPE_REAL) {
			csbot targ;
			targ = (csbot)a;

			if (targ.team == TEAM_T)
				continue;
			if (targ.health <= 0)
				continue;
				
			targ.RunToHostages();
		}
	}
}

void
CSBot_BuyStart_Shop(void)
{
	int done = 0;
	int count = 0;
	player pl = (player)self;

	pl.team = infokeyf(pl, "*team");

	count = 0;
	while (done != 1) {
		int r = floor(random(1,17));

		if (pl.team == TEAM_T) {
			if (r == WEAPON_M4A1) { continue; }
			if (r == WEAPON_AUG) { continue; }
			if (r == WEAPON_SG550) { continue; }
			if (r == WEAPON_FIVESEVEN) { continue; }
			if (r == WEAPON_TMP) { continue; }
		} else if (pl.team == TEAM_CT) {
			if (r == WEAPON_AK47) { continue; }
			if (r == WEAPON_SG552) { continue; }
			if (r == WEAPON_G3SG1) { continue; }
			if (r == WEAPON_ELITES) { continue; }
			if (r == WEAPON_MAC10) { continue; }
		}
	
		if (g_cstrikeWeaponPrice[r] <= pl.money) {
			CSEv_BuyWeapon_f((float)r);
			done = 1;
		}
		count++;

		/* give it enough attempts */
		if (count > 17)
			done = 1;
	}

	/* need armor */
	if (pl.armor < 100) {
		if (pl.money >= g_cstrikeUtilPrice[1]) /* kevlar and helmet */
			CSEv_BuyEquipment_f(1);
		else if (pl.money >= g_cstrikeUtilPrice[0]) /* just kevlar */
			CSEv_BuyEquipment_f(0);
	} else if (!(pl.g_items & ITEM_HELMET)) { /* we need helmet */
		if (pl.money >= 350) /* kevlar and helmet */
			CSEv_BuyEquipment_f(1);
	}

	/* make SURE we switch to it */
	for (int i = 0; i < g_weapons.length; i++)
		if (pl.g_items & g_weapons[i].id) {
			pl.activeweapon = i;
			Weapons_Draw();
			return;
		}

	/* force buy right now */
	CSEv_AmmoBuyPrimary();
	CSEv_AmmoBuySecondary();
}

void
CSBot_BuyStart(void)
{
	for (entity a = world; (a = find(a, classname, "player"));) {
		if (clienttype(a) != CLIENTTYPE_REAL) {
			if (a.health <= 0)
				continue;

			a.think = CSBot_BuyStart_Shop;
			a.nextthink = time + random(0, autocvar_mp_freezetime);
		}
	}
}

void
CSBot_RoundStart(void)
{
	if (g_cs_bombzones <= 0) {
		return;
	}
	for (entity a = world; (a = find(a, classname, "player"));) {
		if (clienttype(a) != CLIENTTYPE_REAL) {
			csbot targ;
			targ = (csbot)a;

			if (targ.team == TEAM_T)
				targ.m_iIsFetchingBomb = FALSE;
		}
	}
}
